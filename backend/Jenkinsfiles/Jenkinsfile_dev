def dockerRepository = "qortn365"
def dockerImageName = "ssafish_dev"
def deployHost = "i9e202.p.ssafy.io"

pipeline {
    agent any

    stages {
        stage('Checkout'){
            steps {
                checkout scm
            }
        }
        stage('Build') { //war 파일로 빌드된다.
            steps {

                withCredentials([usernamePassword(credentialsId: 'dockerhub-key',
                                 usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                        sh """
                        cd backend
                            chmod u+x ./gradlew
                            ./gradlew clean bootJar
                        """
                    }
                }
            }
        }
        stage('Publish') { //도커허브에 게시된다.
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-key',
                                 usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                        sh """
                        cd backend
                           ./gradlew jib -Pdocker.repository=${dockerRepository} \
                           -Pdocker.repository.username=${USERNAME} \
                           -Pdocker.repository.password=${PASSWORD} \
                           -Pdocker.image.name=${dockerImageName} \
                            -Pdocker.image.tag="latest"

                        """
                    }
                }
            }
        }//배포 확인
        stage('Deploy'){// ec2에 배포된다. 즉 이미지를 받아서 실행한다x.
            steps {
                sshagent(credentials: ["deploy-key"]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ubuntu@i9e202.p.ssafy.io \
                    'docker rm -f ${dockerImageName} &&
                    docker run -d -t -p 5001:5001 --rm --name ${dockerImageName} ${dockerRepository}/${dockerImageName}:latest;'
                    """
                }
            }
        }
    }
}



